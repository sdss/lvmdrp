#!/usr/bin/env python
# encoding: utf-8
#

import os
import pathlib
import shutil
from itertools import groupby

import click
import cloup
from cloup.constraints import mutually_exclusive, RequireExactly, IsSet, If

from lvmdrp.main import run_drp, reduce_file, check_daily_mjd, parse_mjds, read_expfile
from lvmdrp.functions.skyMethod import configureSkyModel_drp
from lvmdrp.utils.metadata import get_frames_metadata, get_master_metadata
from lvmdrp.utils.cluster import run_cluster

from lvmdrp.functions.run_calseq import (
    COUNTS_THRESHOLDS,
    reduce_nightly_sequence,
    reduce_longterm_sequence,
    fix_raw_pixel_shifts)

from sdss_access import Access


class StrListType(click.ParamType):
    name = 'str_list'

    def convert(self, value, param, ctx):
        try:
            parts = value.split(',')

            return parts

        except ValueError:
            self.fail(f'{value} is not a valid input', param, ctx)


class IntListType(click.ParamType):
    name = 'int_list'

    def convert(self, value, param, ctx):
        try:
            # Split the input value by commas
            if isinstance(value, str):
                parts = value.split(',')
            else:
                parts = value

            return [int(part) for part in parts]

        except ValueError:
            self.fail(f'{value} is not a valid input', param, ctx)


class IntRangeType(click.ParamType):
    name = 'int_ranges'

    def convert(self, value, param, ctx):
        try:
            # Split the input value by commas
            if isinstance(value, str):
                parts = value.split(',')
            else:
                parts = value

            if len(parts) == 1:
                # If only one part, treat it as a single integer
                return [int(parts[0])]
            elif len(parts) == 2:
                # If two parts, treat them as initial and final values for a range
                start, end = map(int, parts)
                return list(range(start, end + 1))

            self.fail(f'{value} is not a valid input', param, ctx)

        except ValueError:
            self.fail(f'{value} is not a valid input', param, ctx)


class WaveRange(click.ParamType):
    name = 'wave_ranges'

    def convert(self, value, param, ctx):
        try:
            # Split the input value by commas
            if isinstance(value, str):
                waves = value.split(',')
            else:
                waves = value

            if len(waves) == 2:
                # Only if two parts, treat them as initial and final values for a range
                return tuple(map(float, waves))

            self.fail(f'{value} is not a valid input', param, ctx)

        except ValueError:
            self.fail(f'{value} is not a valid input', param, ctx)


@click.group('drp', short_help='CLI for the LVM data reduction')
def cli():
    pass


@cloup.command(short_help='Run the DRP reduction', show_constraints=True)
@click.option('-m', '--mjd', type=int, help='an MJD to reduce')
@click.option('-l', '--mjd-list', type=int, multiple=True, help='a list of specific MJDs to reduce')
@click.option('-r', '--mjd-range', type=str, help='a range of MJDs to reduce')
@click.option('--with-cals', is_flag=True, default=False, help='Flag to include indiviual calibration frames')
@click.option('--no-sci', is_flag=True, default=False, help='Flag to exclude science frame reductions')
@click.option('-e', '--expnum', type=int, help='an exposure number to reduce')
@click.option('-el', '--exp-list', type=int, multiple=True, help='a list of specific exposures to reduce')
@click.option('-er', '--exp-range', type=str, help='a range of exposure numbers to reduce')
@click.option('-F', '--exp-file', type=str, help='a file containing a list of exposure numbers')
@click.option('-f', '--fluxcal-method', type=str, help='Use "NONE" or "STD" for standard stars, "SCI" for field stars')
@click.option('-2d', '--skip-2d', is_flag=True, default=False, help='Skip preprocessing and detrending')
@click.option('-1d', '--skip-1d', is_flag=True, default=False, help='Skip astrometry, straylight subtraction and extraction')
@click.option('-p1d', '--skip-post-1d', is_flag=True, default=False, help='Skip wavelength calibration, flatfielding, sky processing and flux calibration')
@click.option('-c', '--clean-ancillary', is_flag=True, default=False, help='Remove ancillary paths after run')
@click.option('-d', '--debug-mode', is_flag=True, default=False, help='Set debug mode on to run using aperture extraction and skip CR rejection')
@cloup.constraint(mutually_exclusive, ['mjd', 'mjd_list', 'mjd_range'])
# @cloup.constraint(RequireExactly(1), ['mjd', 'mjd_list', 'mjd_range'])
@cloup.constraint(mutually_exclusive, ['expnum', 'exp_list', 'exp_range'])
def run(mjd, mjd_list, mjd_range, with_cals, no_sci, expnum, exp_list, exp_range, exp_file, fluxcal_method,
        skip_2d, skip_1d, skip_post_1d, clean_ancillary, debug_mode):
    """ Run the DRP reduction for a given MJD or range of MJDs

    Run the DRP for an MJD or range of MJDs.  Various flags and options are available
    for filtering on calibration or science frames, or specific exposures.

    """
    if exp_file is not None:
        expnum = read_expfile(exp_file)
    else:
        mjd = mjd or mjd_list or mjd_range
        expnum = expnum or exp_list or exp_range

    if fluxcal_method is None:
        fluxcal_method = 'STD'
    assert (fluxcal_method in ['STD', 'SCI', 'NONE']), 'Fluxcal method must be either STD or SCI or NONE'

    run_drp(mjd=mjd, expnum=expnum, no_sci=no_sci, with_cals=with_cals, fluxcal_method=fluxcal_method,
            skip_2d=skip_2d,
            skip_1d=skip_1d,
            skip_post_1d=skip_post_1d,
            clean_ancillary=clean_ancillary,
            debug_mode=debug_mode)


# register full DRP command
cli.add_command(run)


@cli.command('check', short_help='Check for daily run of the DRP at Utah')
@click.option('-t', '--test', is_flag=True, default=False, help='Test the check without running the DRP')
@click.option('--with-cals', is_flag=True, default=False, help='Flag to include indiviual calibration frames')
def check_daily(test, with_cals):
    """ Checks the current MJD and starts the DRP

    Checks the current daily MJD againt the Utah data transfer, and if
    complete, starts the DRP run at Utah.

    """
    check_daily_mjd(test=test, with_cals=with_cals)


@cli.command('reduce_file', short_help='Reduce a single file')
@click.option('-f', '--filename', type=str, help='a full path filename to reduce')
def run_reduce_file(filename):
    """ Run a single raw sdR frame file through the LVM DRP """
    reduce_file(filename)


@click.group('sky', short_help='Run routines related to sky subtraction')
def skycli():
    pass


@skycli.command('configure', short_help='Configure the ESO sky routines')
@click.option('-l', '--library', is_flag=True, default=False, show_default=True,
              help='Flag to run ESO routines to build a spectral library')
@click.option('-m', '--multiscat', is_flag=True, default=False, show_default=True,
              help='Flag to run ESO "estmultiscat" routine for multiple scattering corrections')
def sky_configure(library, multiscat):
    """ Run the sky module configuration """
    configureSkyModel_drp(run_libary=library, run_multiscat=multiscat)


cli.add_command(skycli)


@click.group('metadata', short_help='Run routines related to frame metadata')
def metacli():
    pass


@cloup.command('regenerate', short_help='Regenerate the frames metadata file')
@click.option('-m', '--mjd', type=int, help='the MJD to regenerate the metadata for')
@click.option('-a', '--masters', is_flag=True, default=False, help='Flag to regenerate the masters metadata')
@cloup.constraint(If(~IsSet('masters'), then=RequireExactly(1)), ['mjd'])
def regen(mjd: int, masters: bool):
    """ Regenerate the raw or master frames metadata file """
    if masters:
        get_master_metadata(overwrite=True)
    else:
        get_frames_metadata(mjd=mjd, overwrite=True)


metacli.add_command(regen)

cli.add_command(metacli)


@cli.command('calibrations', short_help='Run calibration sequences reduction', context_settings=dict(show_default=True))
@click.option('-m', '--mjd', type=int, help='an MJD to reduce')
@click.option('-l', '--mjd-list', type=int, multiple=True, help='a list of specific MJDs to reduce')
@click.option('-r', '--mjd-range', type=str, help='a range of MJDs to reduce')
@click.option('-cr', '--reject-cr', is_flag=True, default=False, help='flag to run cosmic rays rejection')
@click.option('-b', '--skip-bias', is_flag=True, default=False, help='skip bias calibrations')
@click.option('-t', '--skip-trace', is_flag=True, default=False, help='skip fiber traces')
@click.option('-w', '--skip-wavelength', is_flag=True, default=False, help='skip wavelength calibrations')
@click.option('-d', '--skip-dome', is_flag=True, default=False, help='skip dome fiberflats')
@click.option('-f', '--skip-twilight', is_flag=True, default=False, help='skip twilight fiberflats')
@click.option('--ldls-threshold', type=float, default=COUNTS_THRESHOLDS["ldls"], help='count threshold for tracing with LDLS lamp exposures')
@click.option('--qrtz-threshold', type=float, default=COUNTS_THRESHOLDS["quartz"], help='count thredhols for tracing with Quartz lamp exposures')
@click.option('--cent-ncolumns', type=int, default=140, help='number of columns to trace fiber centroids')
@click.option('--full-ncolumns', type=int, default=40, help='number of columns to full fiber tracing')
@click.option('-x', '--extract-md', is_flag=True, default=False, help='flag to extract metadata or use cached metadata if exist')
@click.option('-s', '--skip-done', is_flag=True, default=False, help='flag to skip reduction steps that have already been done')
@click.option('-c', '--clean-ancillary', is_flag=True, default=False, help='Remove ancillary paths after run')
@click.option('--fflats-from-to', type=int, default=((None, None),), nargs=2, multiple=True, help='Move twilight fiberflats from one MJD to another MJD')
@click.option('--nightly', is_flag=True, default=False, help='flag to reduce nightly calibration sequence (defaults to long-term)')
@cloup.constraint(mutually_exclusive, ['mjd', 'mjd_list', 'mjd_range'])
@cloup.constraint(RequireExactly(1), ['mjd', 'mjd_list', 'mjd_range'])
def calibrations(mjd, mjd_list, mjd_range, reject_cr,
                 skip_bias, skip_trace, skip_wavelength,
                 skip_dome, skip_twilight,
                 ldls_threshold, qrtz_threshold,
                 cent_ncolumns, full_ncolumns,
                 extract_md, skip_done, clean_ancillary,
                 fflats_from_to, nightly):
    """ Run calibration sequence reduction """

    only_cals = {flavor for flavor, skip in zip(["bias", "trace", "wave", "dome", "twilight"],
                                                [skip_bias, skip_trace, skip_wavelength, skip_dome, skip_twilight]) if not skip}

    # get MJDs for twilight fiberflats copies
    fflats_from, fflats_to = zip(*fflats_from_to)

    # parse MJDs or
    mjds = parse_mjds(mjd=mjd or mjd_list or mjd_range or None)
    if not isinstance(mjds, (list, tuple)):
        mjds = [mjds]

    # choose reduction routine
    reduction_routine = reduce_nightly_sequence if nightly else reduce_longterm_sequence
    # run reduction sequence
    for mjd in mjds:
        reduction_routine(mjd=mjd, reject_cr=reject_cr,
                          use_longterm_cals=not nightly,
                          only_cals=only_cals,
                          counts_thresholds={"ldls": ldls_threshold, "quartz": qrtz_threshold},
                          cent_guess_ncolumns=cent_ncolumns, trace_full_ncolumns=full_ncolumns,
                          extract_metadata=extract_md, skip_done=skip_done,
                          keep_ancillary=not clean_ancillary,
                          fflats_from=fflats_from[fflats_to.index(mjd)] if mjd in fflats_to else None)

# register calibration sequence
cli.add_command(calibrations)


@cli.command('fix-pixel-shifts', short_help='Fix the electronic pixel shifts in the raw data')
@click.option('-m', '--mjd', type=int, help='the MJD to reduce')
@click.option('-e', '--expnums', type=IntListType(), help='a list of exposure numbers to reduce')
@click.option('-r', '--ref-expnums', type=IntListType(), help='a list of reference exposure numbers')
@click.option('--img-types', type=StrListType(), help='a list of image types to analyse')
@click.option('-c', '--custom-shift', type=(str, int, int), multiple=True, help='3-tuple of spectrograph, exposure and pixel row to shift from')
@click.option('-w', '--wave-widths', type=int, default=5000, help='the width of the wavelength range in angstroms')
@click.option('-y', '--y-widths', type=int, default=20, help='the width of the cross-dispersion aperture in pixels')
@click.option('-f', '--flat-spikes', type=int, default=21, help='the window within which to filter spikes')
@click.option('-t', '--threshold-spikes', type=float, default=0.6, help='the threshold for the spikes filtering')
@click.option('-i', '--interactive', is_flag=True, default=False, help='flag to run in interactive mode when QC and DRP discrepancies are found')
def fix_pixel_shifts(mjd, expnums, ref_expnums, img_types, custom_shift, wave_widths, y_widths, flat_spikes, threshold_spikes, interactive):
    """ Fix the electronic pixel shifts in the raw data """
    custom_shifts = {}
    for key, vals in groupby(custom_shift, key=lambda t: t[:2]):
        custom_shifts[key] = list(v[-1] for v in vals)

    fix_raw_pixel_shifts(mjd=mjd, expnums=expnums, ref_expnums=ref_expnums, imagetyps=img_types,
                         wave_widths=wave_widths, y_widths=y_widths,
                         shift_rows=custom_shifts, flat_spikes=flat_spikes,
                         threshold_spikes=threshold_spikes,
                         interactive=interactive, skip_done=True)

# register fix pixel shifts command
cli.add_command(fix_pixel_shifts)


@cli.command('erase', short_help='Remove the DRP reductions')
@click.option('-d', '--drpver', type=str, help='the DRP version', required=True)
def erase(drpver: str):
    """ Clean out the DRP reductions for a given version """
    path = pathlib.Path(os.getenv('LVM_SPECTRO_REDUX')) / drpver
    if not path.exists():
        click.echo(f'Path {path} does not exist.')
        return
    shutil.rmtree(path)


@cli.command(short_help='Download the master calibrations')
@click.option('-k', '--kind', type=str, default='*', help='the kind of files to download, e.g "pixmask".', show_default=True)
@click.option('-m', '--mjd', type=str, default='*', help='the MJD folder to download', show_default=True)
@click.option('-c', '--camera', type=str, default='*', help='the camera to download, e.g. "b*" or "b1".', show_default=True)
def get_calibs(kind, mjd, camera):
    """ Download the master calibration frames

    Downloads the master calibration frames from the Utah SAS in LVM_SANDBOX/calib.  This command
    only downloads files when they do not yet exist on your local system or when the remote files
    are newer.

    The syntax for the calibration files are $LVM_SANDBOX/calib/[mjd]/lvm-m[kind]-[camera].fits.
    "mjd" is the MJD directory to download. "kind" is the kind of calib file to download, e.g. bias,
    fiberflat, without the leading "m".  "camera" is the camera, can be a specific channel, e.g "b1"
    or all channels with "b*". The pixel masks and flats are stored at $LVM_SANDBOX/calib/pixelmasks
    and are automatically included in the download.

    """
    a = Access()
    a.remote()
    a.add('lvm_calib', kind="pix*", mjd="pixelmasks", camera=camera)
    a.add('lvm_calib', kind=kind, mjd=mjd, camera=camera)
    a.set_stream()
    a.commit()


@cli.command('cluster', short_help='Submit a Utah cluster run')
@click.option('-l', '--mjd-list', type=int, default=None, multiple=True, help='a list of specific MJDs to reduce')
@click.option('-r', '--mjd-range', type=str, default=None, help='a range of MJDs to reduce')
@click.option('-e', '--expnum', type=int, help='an exposure number to reduce')
@click.option('-el', '--exp-list', type=int, multiple=True, help='a list of specific exposures to reduce')
@click.option('-er', '--exp-range', type=str, help='a range of exposure numbers to reduce')
@click.option('-F', '--exp-file', type=str, help='a file containing a list of exposure numbers')
@click.option('-n', '--nodes', type=int, default=2, help='the number of nodes to use')
@click.option('-p', '--ppn', type=int, default=64, help='the number of CPU cores to use per node')
@click.option('-w', '--walltime', type=str, default="24:00:00", help='the time for which the job is allowed to run')
@click.option('-a', '--alloc', type=click.Choice(['sdss-np', 'sdss-kp']), default='sdss-np', help='which partition to use')
@click.option('-s', '--submit', is_flag=True, type=bool, default=True, help='flag to submit the job or not')
@click.option('--run-calibs', is_flag=True, type=bool, default=False, help="run calibration sequences only")
@click.option('--drp-options', type=str, default="", help="pass options to drp run command")
def cluster(mjd_list, mjd_range, expnum, exp_list, exp_range, exp_file, nodes, ppn, walltime,
            alloc, submit, run_calibs, drp_options):
    """ Submit a Utah cluster job to batch run the DRP by MJD """

    # filter the mjds
    expnums = expnum or exp_list or exp_range or exp_file or None
    mjds = mjd_list or mjd_range or None
    if mjds:
        mjds = parse_mjds(mjds)

    # submit the cluster job
    run_cluster(mjds=mjds, expnums=expnums, nodes=nodes, ppn=ppn, walltime=walltime, alloc=alloc, submit=submit,
                run_calibs=run_calibs, drp_options=drp_options)


if __name__ == "__main__":
    cli()
