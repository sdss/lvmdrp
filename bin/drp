#!/usr/bin/env python
# encoding: utf-8
#

import click
import cloup
from cloup.constraints import mutually_exclusive, RequireExactly, IsSet, If

from astropy.io import fits
from lvmdrp.functions.run_drp import run_drp, get_config_options, reduce_file, check_daily_mjd
from lvmdrp.functions.imageMethod import preproc_raw_frame
from lvmdrp.functions.skyMethod import configureSkyModel_drp
from lvmdrp.utils.metadata import get_frames_metadata, get_master_metadata

from lvmdrp.functions.run_quickdrp import quick_science_reduction


@click.group('drp', short_help='CLI for the LVM data reduction')
def cli():
    pass


@cloup.command(short_help='Run the DRP reduction', show_constraints=True)
@click.option('-m', '--mjd', type=int, help='an MJD to reduce')
@click.option('-l', '--mjd-list', type=int, multiple=True, help='a list of specific MJDs to reduce')
@click.option('-r', '--mjd-range', type=str, help='a range of MJDs to reduce')
@click.option('--with-cals', is_flag=True, default=False, help='Flag to include indiviual calibration frames')
@click.option('--no-sci', is_flag=True, default=False, help='Flag to exclude science frame reductions')
@click.option('-e', '--expnum', type=int, help='an exposure number to reduce')
@click.option('-el', '--exp-list', type=int, multiple=True, help='a list of specific exposures to reduce')
@click.option('-er', '--exp-range', type=str, help='a range of exposure numbers to reduce')
@cloup.constraint(mutually_exclusive, ['mjd', 'mjd_list', 'mjd_range'])
@cloup.constraint(RequireExactly(1), ['mjd', 'mjd_list', 'mjd_range'])
@cloup.constraint(mutually_exclusive, ['expnum', 'exp_list', 'exp_range'])
def run(mjd, mjd_list, mjd_range, with_cals, no_sci, expnum, exp_list, exp_range):
    """ Run the DRP reduction for a given MJD or range of MJDs

    Run the DRP for an MJD or range of MJDs.  Various flags and options are available
    for filtering on calibration or science frames, or specific exposures.

    """
    mjd = mjd or mjd_list or mjd_range
    expnum = expnum or exp_list or exp_range
    run_drp(mjd=mjd, expnum=expnum, no_sci=no_sci, with_cals=with_cals)


# register full DRP command
cli.add_command(run)


@cli.command('check', short_help='Check for daily run of the DRP at Utah')
@click.option('-t', '--test', is_flag=True, default=False, help='Test the check without running the DRP')
@click.option('--with-cals', is_flag=True, default=False, help='Flag to include indiviual calibration frames')
def check_daily(test, with_cals):
    """ Checks the current MJD and starts the DRP

    Checks the current daily MJD againt the Utah data transfer, and if
    complete, starts the DRP run at Utah.

    """
    check_daily_mjd(test=test, with_cals=with_cals)


@cli.command('reduce_file', short_help='Reduce a single file')
@click.option('-f', '--filename', type=str, help='a full path filename to reduce')
def run_reduce_file(filename):
    """ Run a single raw sdR frame file through the LVM DRP """
    reduce_file(filename)


@click.group('sky', short_help='Run routines related to sky subtraction')
def skycli():
    pass


@skycli.command('configure', short_help='Configure the ESO sky routines')
@click.option('-l', '--library', is_flag=True, default=False, show_default=True,
              help='Flag to run ESO routines to build a spectral library')
@click.option('-m', '--multiscat', is_flag=True, default=False, show_default=True,
              help='Flag to run ESO "estmultiscat" routine for multiple scattering corrections')
def sky_configure(library, multiscat):
    """ Run the sky module configuration """
    configureSkyModel_drp(run_libary=library, run_multiscat=multiscat)


cli.add_command(skycli)


@click.group('metadata', short_help='Run routines related to frame metadata')
def metacli():
    pass


@cloup.command('regenerate', short_help='Regenerate the frames metadata file')
@click.option('-m', '--mjd', type=int, help='the MJD to regenerate the metadata for')
@click.option('-a', '--masters', is_flag=True, default=False, help='Flag to regenerate the masters metadata')
@cloup.constraint(If(~IsSet('masters'), then=RequireExactly(1)), ['mjd'])
def regen(mjd: int, masters: bool):
    """ Regenerate the raw or master frames metadata file """
    if masters:
        get_master_metadata(overwrite=True)
    else:
        get_frames_metadata(mjd=mjd, overwrite=True)


metacli.add_command(regen)

cli.add_command(metacli)


@click.command(short_help='Run the Quick DRP')
@click.option('-e', '--expnum', type=int, help='an exposure number to reduce')
@click.option('-f', '--use-fiducial-master', is_flag=True, default=False, help='use fiducial master calibration frames')
@click.option('-s', '--skip-sky-subtraction', is_flag=True, help='skip sky subtraction')
@click.option('--sky-weights', type=(float, float), default=None, help='weights (east, west) for the master sky combination')
@click.option('-n', '--ncpus', type=int, default=None, help='number of CPUs to use during extraction')
@click.option("-a", "--aperture-extraction", is_flag=True, default=False, help="run quick reduction with aperture extraction")
def quick_reduction(expnum: int, use_fiducial_master: bool, skip_sky_subtraction: bool,
                    sky_weights: tuple, ncpus: int, aperture_extraction: bool) -> None:
    quick_science_reduction(expnum, use_fiducial_master, skip_sky_subtraction,
                            sky_weights, ncpus, aperture_extraction)


# register quick DRP command
cli.add_command(quick_reduction)


if __name__ == "__main__":
    cli()
