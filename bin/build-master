#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Alfredo Mejía-Narváez
# @Date: Jun 28, 2022
# @Filename: build-master
# @License: BSD 3-Clause
# @Copyright: SDSS-V LVM

import sys
import os
import argparse

from lvmdrp.core.constants import PRODUCT_PATH
from lvmdrp.core import image
from lvmdrp.utils.database import CalibrationFrames, create_or_connect_db, get_calib_metadata, get_analogs_metadata, add_master
from lvmdrp.utils import get_master_name
from lvmdrp.utils.bitmask import ReductionStatus, QualityFlag
from lvmdrp.main import load_master_config

import warnings
from astropy.utils.exceptions import AstropyWarning

warnings.simplefilter('ignore', category=AstropyWarning)

def parse_arguments(config, args=None):
    if args is None:
        args = sys.argv[1:]
    # define cmdline arguments parser
    parser = argparse.ArgumentParser(
        prog="LVM master calibration frame builder",
        description="This script retrieves preprocessed calibration frames and combine them into master calibration frames"
    )
    # config parser
    # parse
    cmd_args = parser.parse_args(args)
    # replace config parameters with cmdline arguments
    return config, cmd_args

# BUG: this function is doing too much! It should:
#      * look for calibrated analogs
#      * build a calibrated master
#      * it should be its own script
#      the DRP should handle the reduction of masters continuum and arc
def build_master(config, analogs_metadata):
    status = ReductionStatus.IN_PROGRESS
    flags = QualityFlag.OK
    calib_images = []
    analog_path = PRODUCT_PATH.format(path=config.LVM_SPECTRO_CALIB_PATH, label="{label}", kind="calib")
    for analog_metadata in analogs_metadata:
        # BUG: best way to calculate gain for each amplifier: series of flats and fit the slope for sigma_counts vs sqrt(mean_counts)
        calib_images.append(image.loadImage(analog_path.format(label=analog_metadata.label)))
        status += analog_metadata.status
        flags += analog_metadata.flags
    
    # TODO: test and update database
    #   - test quality of master
    #   - add frame to master frames
    #   - add flags according to test results
    #   - add DB reference for preprocessed frames
    # BUG: set master & analogs reduction state before entering 'build_master' & put calibration state for both
    # save calibrated analogs & build master
    master_label = get_master_name(analog_metadata.label, analog_metadata.imagetyp, analog_metadata.mjd)
    master_path = analog_path.format(label=master_label)
    if len(calib_images) > 1:
        new_master = image.combineImages(calib_images, method="median")
        new_master.writeFitsData(master_path)
        status += "FINISHED"
    else:
        status += "FAILED"
        flags += "POORLY_DEFINED_MASTER"

    # define new master metadata
    master_metadata = CalibrationFrames(
        label=master_label,
        path=master_path if os.path.isfile(master_path) else None,
        reduction_started=analog_metadata.reduction_started,
        reduction_finished=analog_metadata.reduction_finished,
        is_master=True,
        status=status,
        flags=flags
    )
    return master_metadata


if __name__ == "__main__":
    # parse master config file
    config = load_master_config()
    # parse cmdline arguments
    config, cmd_args = parse_arguments(config=config)
    # connect to DB for new frames
    db = create_or_connect_db(config=config)
    # retrieve preprocessed calibration metadata
    calibs_metadata = get_calib_metadata()
    if not calibs_metadata:
        raise ValueError(f"you need to preprocess the calibration frames first")
    # build master
    for calib_metadata in calibs_metadata:
        # retrieve analog frames for master
        if calib_metadata.is_master: continue

        metadata = calib_metadata.frames[0]
        analogs_metadata = get_analogs_metadata(metadata=metadata)
        
        if not analogs_metadata:
            raise ValueError(f"no analog frames found for '{metadata.label}' to build master {metadata.imagetyp}")

        master_metadata = build_master(
            config=config,
            analogs_metadata=analogs_metadata
        )
        # create new master DB record
        add_master(master_metadata=master_metadata, analogs_metadata=analogs_metadata)
