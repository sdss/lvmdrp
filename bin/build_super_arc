#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Alfredo Mejía-Narváez
# @Date: Jul 24, 2023
# @Filename: build-super-arc
# @License: BSD 3-Clause
# @Copyright: SDSS-V LVM

import argparse
import os
import sys

from lvmdrp import log, path, __version__ as drpver
from lvmdrp.utils import metadata as md

from lvmdrp.core.constants import ARC_LAMPS
from lvmdrp.functions import imageMethod

from build_super_pixmask import _header_fix


# default MJD pattern
DEFAULT_MJDS = "6014?"

# define list of lamps
lamps = [lamp.lower() for lamp in ARC_LAMPS]
# initialize lamps status (OFF)
lamps_status = dict.fromkeys(lamps, False)


def parse_arguments(args=None):
    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description="build super arc by combining individual 2D arc frames across MJDs",
    )
    parser.add_argument(
        "--mjds", "-m",
        help=f"wildcard pattern to match several MJDs in the local SAS. By default {DEFAULT_MJDS}",
        default=DEFAULT_MJDS
    )

    args = parser.parse_args()
    return args

if __name__ == "__main__":
    # parse arguments
    cmd_args = parse_arguments(args=sys.argv[1:])
    
    # extract metadata for target MJDs
    raw_paths = md.locate_new_frames(hemi="s", mjd=cmd_args.mjds, camera="*", expnum="????????")
    _ = md.extract_metadata(raw_paths)
    # filter metadata to get only arcs
    arcs = md.get_metadata(tileid="*", mjd=cmd_args.mjds, kind="raw", imagetyp="arc")
    log.info(f"processing arcs from MJDs = {set(arcs.mjd)}")

    # get max MJD and tileid for new supers
    target_mjd = arcs.mjd.max()
    target_tileid = arcs.loc[arcs.mjd == target_mjd].tileid.max()
    
    # process arc frames
    for lamp in lamps[:-1]:
        # set current lamp status
        lamps_current = lamps_status.copy()
        lamps_current[lamp] = True
        
        # group arcs into analogs of current lamp
        analogs, cpaths, mpaths = md.get_analog_groups(tileid=1111, mjd=target_mjd, imagetyp="arc", **lamps_current)
        
        for i, (keys, analog) in enumerate(analogs.items()):
            # unpack keys
            tileid, mjd, imagetyp, camera = keys
            # match masters
            masters = md.match_master_metadata(target_imagetyp="arc", target_camera=camera)
            mpixmask = path.full("lvm_master", drpver=drpver, kind="mpixmask", **masters["pixmask"])
            mbias = path.full("lvm_master", drpver=drpver, kind="mbias", **masters["bias"])
            mdark = path.full("lvm_master", drpver=drpver, kind="mdark", **masters["dark"])
            mflat = path.full("lvm_master", drpver=drpver, kind="mflat", **masters["flat"])
            
            # preproc and detrend raw arcs
            for j, (_, arc) in enumerate(analog.iterrows()):
                rpath = path.full("lvm_raw", camspec=arc.camera, **arc.to_dict())
                ppath = path.full("lvm_anc", drpver=drpver, kind="p", imagetype=arc.imagetyp, **arc.to_dict())
                cpath = cpaths[keys][j]
                
                if os.path.isfile(ppath):
                    log.info(f"skipping {ppath}, file already exist")
                    continue
                
                os.makedirs(os.path.dirname(ppath), exist_ok=True)
                imageMethod.preproc_raw_frame(in_image=rpath, out_image=ppath, in_mask=mpixmask)
                imageMethod.detrend_frame(in_image=ppath, out_image=cpath, in_bias=mbias, in_dark=mdark)
            
            # define master path
            mpath = mpaths[i].replace("marc", f"marc_{lamp}")
            # create master arcs
            os.makedirs(os.path.dirname(mpaths[i]), exist_ok=True)
            imageMethod.create_master_frame(in_images=cpaths[keys], out_image=mpath)
            # fix header for metadata reconstruction
            _header_fix(mpath, target_mjd, target_tileid)
    
    # extract frames
    master_paths = [os.path.join(root, file) for root, _, files in os.walk(os.getenv("LVM_SPECTRO_REDUX")) for file in files if file.startswith("lvm-marc_") and file.endswith(".fits")]
    master_arcs = md.extract_metadata(kind="master", frames_paths=master_paths)
    for _, marc in master_arcs.iterrows():
        lamp = marc[lamps].astype(int).idxmax(0)
        mpath = path.full("lvm_master", drpver=drpver, kind=f"marc_{lamp}", **marc.to_dict())
        xpath = path.full("lvm_master", drpver=drpver, kind=f"xmarc_{lamp}", **marc.to_dict())
        
        mtrace = path.full("lvm_master", drpver=drpver, kind="mtrace", **marc.to_dict())
        imageMethod.extract_spectra(in_image=mpath, out_rss=xpath, in_trace=mtrace, method="aperture", aperture=3)
