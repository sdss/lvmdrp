#!/usr/bin/env python
import sys
from Py3D import functions


if __name__=="__main__":
    args = sys.argv[1:]
    #(options,  args) =  parser.parse_args()
 #   print args
    if len(args)==0:
        print 'No subcategory of commands given.'
        print 'Please use "Py3D help" for a list of valid command categories'
    elif args[0]=='help':
        print ''
        print 'Available command SUBCATEGORIES of Py3D:'
        i=1
        methods = dir(functions)
        for func in methods:
            if not '_' in func:
                print '%i. %s  >> %s '%(i, func.split('Method')[0], eval('functions.'+func+'.description'))
                i+=1
        print ''
        print 'Please use "Py3D SUBCATEGORY help" to get a list of available commands for the category'
        print ''
        
    elif args[0]+'Method' in dir(functions):
        command = 'functions.'+args[0]+'Method.'
        if args[1]=='help' and len(args)==2:
            try:
                list_commands = eval("dir(%s)"%(command[:-1]))
                print ''
                print 'Available Py3D COMMANDs among the subcategory %s:' %(args[0])
                for comm in list_commands:
                    if '_py3d' in comm:
                        print '%s' %(comm.split('_py3d')[0])
                print ''
                print 'Please use "Py3D %s help COMMAND" to detailed information command, its description, '%(args[0])
                print 'required and optional parameter. You can quit the help by pressing "q" on your keyboard.'
                print 'The first row informs you about the internal python method and its parameter list and default values.'
                print ''
                print 'GENERAL REMARKS:'
                print 'You can run the routine by call "Py3D SUBCATEGORY COMMAND" followed by the required parameters.'
                print 'Parameters with default values do not need to be given incase the default setting should be used.'
                print 'The parameters need to be provided in their correct order or should explicitly called with their parameter name, e.g.  name=value.'
                print 'If the parameter value contains a space, e.g. for comment strings, bracket them in "" so they can be associated to a single parameter.'
                
                print ''
            except:
              print 'You have asked for help about a noexisting command subcategory of Py3D'
              print 'Please use "Py3D help" for a list of valid command categories'
        elif args[1]=='help' and len(args)==3:
            try:
                print eval('help('+command+args[2]+'_py3d)')#'.__doc__')
            except:
                print 'You asked for help on a non-existing subcategory and/or command of Py3D'
                
        else:
            key=False
            error=False
            command+=args[1]+'_py3d('
            for a in args[2:]:
                if not '=' in a and key!=True:
                    command+='"'+a+'"'
                elif '=' in a:
                    entry=a.split('=')
                    command+=entry[0]+'="'+entry[1]+'"'
                    key=True
                else:
                    error=True
  #                  print 'The command you tried to run does not exist in Py3D'
                    break
                
                command+=','
            if error==False:
                command=command[:-1]+')'
 #           print command
                eval(command)
    else:
        print 'no'
        
